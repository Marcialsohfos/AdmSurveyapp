let currentDownloadUrl = '';
let currentFile = null; // Stockage global du fichier

console.log('‚úÖ Script.js charg√© avec succ√®s');

// Gestion du drag and drop
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');

if (uploadArea && fileInput) {
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileSelection(files[0]);
        }
    });

    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFileSelection(e.target.files[0]);
        }
    });
}

function handleFileSelection(file) {
    console.log('üìÅ Fichier s√©lectionn√©:', file.name);
    console.log('üìä Type:', file.type);
    console.log('üíæ Taille:', file.size, 'bytes');
    
    // Stocker le fichier globalement
    currentFile = file;
    
    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'application/pdf', 'image/tiff'];
    if (!allowedTypes.includes(file.type)) {
        showError('Type de fichier non support√©.');
        return;
    }
    
    updateUploadArea(file.name);
    
    // V√©rification de debug
    const fileInput = document.getElementById('fileInput');
    console.log('üîç Fichiers dans input:', fileInput.files);
}

function updateUploadArea(filename) {
    // Mise √† jour s√©curis√©e sans perte de r√©f√©rence
    const uploadContent = uploadArea.querySelector('.upload-content');
    if (uploadContent) {
        uploadContent.innerHTML = `
            <i class="upload-icon">‚úÖ</i>
            <h3>Fichier s√©lectionn√©</h3>
            <p><strong>${filename}</strong></p>
            <button class="browse-btn" onclick="document.getElementById('fileInput').click()">
                Changer de fichier
            </button>
        `;
    } else {
        // Fallback si .upload-content n'existe pas
        uploadArea.innerHTML = `
            <div class="upload-content">
                <i class="upload-icon">‚úÖ</i>
                <h3>Fichier s√©lectionn√©</h3>
                <p><strong>${filename}</strong></p>
                <button class="browse-btn" onclick="document.getElementById('fileInput').click()">
                    Changer de fichier
                </button>
            </div>
        `;
    }
}

// FONCTION GLOBALE pour onclick
window.processFile = async function() {
    console.log('üéØ processFile() appel√©e via onclick!');
    
    // V√©rification d√©taill√©e des fichiers
    const fileInput = document.getElementById('fileInput');
    console.log('üîç fileInput:', fileInput);
    console.log('üîç fileInput.files:', fileInput.files);
    console.log('üîç fileInput.files.length:', fileInput.files ? fileInput.files.length : 'null');
    
    // Essayer d'abord le fichier global, puis l'input
    let fileToProcess = currentFile;
    
    if (!fileToProcess && fileInput && fileInput.files && fileInput.files.length > 0) {
        fileToProcess = fileInput.files[0];
        console.log('üìÅ Fichier r√©cup√©r√© depuis input:', fileToProcess.name);
    }
    
    if (!fileToProcess) {
        console.log('‚ùå Aucun fichier d√©tect√©');
        showError('Veuillez s√©lectionner un fichier');
        return;
    }
    
    console.log('‚úÖ Fichier √† traiter:', fileToProcess.name);
    
    const dataType = document.getElementById('dataType');
    const outputFormat = document.getElementById('outputFormat');
    
    if (!dataType || !outputFormat) {
        showError('Erreur de chargement de l\'interface');
        return;
    }
    
    const selectedDataType = dataType.value;
    const selectedOutputFormat = outputFormat.value;
    
    console.log('‚öôÔ∏è Type de donn√©es:', selectedDataType);
    console.log('‚öôÔ∏è Format de sortie:', selectedOutputFormat);
    
    const formData = new FormData();
    formData.append('file', fileToProcess);
    formData.append('data_type', selectedDataType);
    formData.append('format', selectedOutputFormat);
    
    showLoading();
    hideError();
    hideResults();
    
    try {
        console.log('üì§ Envoi vers /upload...');
        const response = await fetch('/upload', {
            method: 'POST',
            body: formData
        });
        //Ajout
// Charger les types de donn√©es depuis l'API
async function loadDataTypes() {
    try {
        const response = await fetch('/api/data_types');
        const data = await response.json();
        
        const dataTypeSelect = document.getElementById('dataType');
        dataTypeSelect.innerHTML = '';
        
        data.data_types.forEach(type => {
            const option = document.createElement('option');
            option.value = type.id;
            option.textContent = type.name;
            dataTypeSelect.appendChild(option);
        });
    } catch (error) {
        console.error('Erreur chargement types:', error);
    }
}

// Charger les formats depuis l'API  
async function loadFormats() {
    try {
        const response = await fetch('/api/formats');
        const data = await response.json();
        
        const formatSelect = document.getElementById('outputFormat');
        formatSelect.innerHTML = '';
        
        data.formats.forEach(format => {
            const option = document.createElement('option');
            option.value = format.id;
            option.textContent = format.name;
            formatSelect.appendChild(option);
        });
    } catch (error) {
        console.error('Erreur chargement formats:', error);
    }
}

// Au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    loadDataTypes();
    loadFormats();
});
        console.log('üì• Statut r√©ponse:', response.status);
        
        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('üìã R√©sultat:', result);
        
        if (result.success) {
            console.log('‚úÖ Succ√®s du traitement');
            showResults(result.data);
            currentDownloadUrl = result.download_url;
            console.log('üîó URL de t√©l√©chargement:', currentDownloadUrl);
        } else {
            console.log('‚ùå Erreur du serveur:', result.error);
            showError(result.error || 'Erreur du serveur');
        }
    } catch (error) {
        console.error('‚ùå Erreur compl√®te:', error);
        showError('Erreur de connexion: ' + error.message);
    } finally {
        hideLoading();
    }
}

// Fonction de t√©l√©chargement globale
window.downloadFile = function() {
    console.log('üì• T√©l√©chargement demand√©, URL:', currentDownloadUrl);
    if (currentDownloadUrl) {
        window.open(currentDownloadUrl, '_blank');
    } else {
        showError('Aucun fichier √† t√©l√©charger');
    }
}

function showResults(data) {
    console.log('üìä Affichage des r√©sultats:', data);
    const resultsSection = document.getElementById('results');
    const extractedData = document.getElementById('extractedData');
    
    if (!resultsSection || !extractedData) {
        console.error('‚ùå √âl√©ments de r√©sultats non trouv√©s');
        return;
    }
    
    let formattedData = '';
    
    // Gestion des diff√©rents types de donn√©es
    if (data.type === 'universal') {
        formattedData = `üìÑ Type d√©tect√©: ${data.detected_type || 'Universal'}\n\n`;
        
        // Afficher le texte brut
        if (data.raw_text) {
            const preview = data.raw_text.substring(0, 500) + (data.raw_text.length > 500 ? '...' : '');
            formattedData += `Texte extrait (preview):\n${preview}\n\n`;
        }
        
        // Afficher les sections
        if (data.sections && data.sections.length > 0) {
            formattedData += `Sections d√©tect√©es: ${data.sections.length}\n`;
            data.sections.slice(0, 3).forEach((section, idx) => {
                formattedData += `${idx + 1}. ${section.title || 'Sans titre'}\n`;
            });
        }
        
    } else if (data.type === 'budget') {
        formattedData = `üí∞ Total: ${data.total}‚Ç¨\n\n`;
        data.lignes_budgetaires.forEach(ligne => {
            formattedData += `${ligne.description}: ${ligne.montant}‚Ç¨\n`;
        });
    } else {
        // Fallback pour les autres types
        formattedData = 'üìÑ Donn√©es extraites:\n' + JSON.stringify(data, null, 2);
    }
    
    extractedData.textContent = formattedData;
    resultsSection.style.display = 'block';
    console.log('‚úÖ R√©sultats affich√©s');
}
function showLoading() {
    console.log('‚è≥ Affichage du loading...');
    const loading = document.getElementById('loading');
    const processBtn = document.getElementById('processBtn');
    
    if (loading) {
        loading.style.display = 'block';
        console.log('‚úÖ Loading affich√©');
    }
    if (processBtn) {
        processBtn.disabled = true;
        console.log('‚úÖ Bouton d√©sactiv√©');
    }
}

function hideLoading() {
    console.log('üèÅ Masquage du loading...');
    const loading = document.getElementById('loading');
    const processBtn = document.getElementById('processBtn');
    
    if (loading) {
        loading.style.display = 'none';
        console.log('‚úÖ Loading masqu√©');
    }
    if (processBtn) {
        processBtn.disabled = false;
        console.log('‚úÖ Bouton r√©activ√©');
    }
}

function showError(message) {
    console.error('üö® Erreur:', message);
    const errorDiv = document.getElementById('error');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        console.log('‚úÖ Message d\'erreur affich√©');
    }
}

function hideError() {
    const errorDiv = document.getElementById('error');
    if (errorDiv) {
        errorDiv.style.display = 'none';
        console.log('‚úÖ Erreur masqu√©e');
    }
}

function hideResults() {
    const resultsSection = document.getElementById('results');
    if (resultsSection) {
        resultsSection.style.display = 'none';
        console.log('‚úÖ R√©sultats masqu√©s');
    }
}

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ SourceAdApp initialis√©');
    console.log('üîç processFile disponible:', typeof processFile);
    console.log('üîç downloadFile disponible:', typeof downloadFile);
    
    // V√©rification des √©l√©ments critiques
    console.log('üîç processBtn:', document.getElementById('processBtn'));
    console.log('üîç fileInput:', document.getElementById('fileInput'));
    console.log('üîç dataType:', document.getElementById('dataType'));
    console.log('üîç outputFormat:', document.getElementById('outputFormat'));
});